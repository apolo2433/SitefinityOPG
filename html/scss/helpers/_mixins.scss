
/*----------  responsive breakpoints
------------------------------------------------------------------------------*/

@mixin breakpoint ($value) {
	@if $value == 'phone' {
		@media only screen and (min-width: 120px) and (max-width: 767px) { @content; }
	}

	@else if $value == 'tablet' {
		@media only screen and (min-width: 768px) and (max-width: 1024px) { @content; }
	}

	@else if $value == 'landscape' {
		@media only screen and (min-width: 961px) and (max-width: 1024px) { @content; }
	}
	
	@else if $value == 'small-desktop' {
		@media only screen and (min-width: 1025px) and (max-width: 1170px) { @content; }
	}

	@else if $value == 'desktop' {
		@media only screen and (min-width: 1171px) { @content }
	}

	@else {
		@media only screen and (max-width: $value) { @content; }
	}
}

/*----------  font smoothing
------------------------------------------------------------------------------*/

@mixin font-smoothing ($val: antialiased) {
	-webkit-font-smoothing: $val;
	-moz-font-smoothing: $val;
	-ms-font-smoothing: $val;
	-o-font-smoothing: $val;
}

/*----------  input placeholder
------------------------------------------------------------------------------*/

@mixin input-placeholder ($placeholder-text-color) {
	&::-webkit-input-placeholder {
		@content;
		color: $placeholder-text-color;
	}

	&:-moz-placeholder {
		@content;
		color: $placeholder-text-color;
	}

	&:-ms-input-placeholder {
		@content;
		color: $placeholder-text-color;
	}
}

/*----------  base float
------------------------------------------------------------------------------*/

@mixin base-float {
	width: 100%;
	float: left;
}

/*----------  Text Overflow
------------------------------------------------------------------------------*/

@mixin text-truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

/*----------  vertical align
------------------------------------------------------------------------------*/

@mixin vertical-align {
	position: relative;
	top: 50%;
	@include translate(0, -50%);
}

/*---------- horizontal align
------------------------------------------------------------------------------*/

@mixin horizontal-align {
	position: relative;
	left: 50%;
	@include translate(-50%, 0);
}

/*---------- font awesome
------------------------------------------------------------------------------*/
@mixin awesome {
	display: inline-block;
	font: normal normal normal 14px/1 FontAwesome;
	font-size: inherit;
	text-rendering: auto;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin mdi {
	display: inline-block;
	font: normal normal normal 14px/1 'Material-Design-Iconic-Font';
	font-size: inherit;
	text-rendering: auto;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

/*---------- svg sprite
------------------------------------------------------------------------------*/

/// Set the `$sprite` map
/// @group sprite
$sprite: map-get($icons, sprite) !default;

/// Retrive an attributes value for a specific icon in the sprite map
/// @param {string} $icon - The name of the icon
/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)
@function sprite-attr($icon, $attr) {
	$newIcon: map-get($icons, $icon);
	@if $newIcon == null {
		@warn "Can't find an icon with the name #{$icon}";
	}
	@return map-get($newIcon, $attr);
}

/// Create a map with the specified icon of attributes
/// @param {string} $icon - The name of the icon
@function icon-attr($icon) {
	$attr: (
		width: sprite-attr($icon, width),
		height: sprite-attr($icon, height),
		x: sprite-attr($icon, backgroundX),
		y: sprite-attr($icon, backgroundY)
	);

	@return $attr;
}

/// Get the width of an icon in em
/// @param {string} $icon - The name of the icon
@function icon_width($icon) {
	@return sprite-attr($icon, width);
}

/// Get the height of an icon in em
/// @param {string} $icon - The name of the icon
@function icon_height($icon) {
	@return sprite-attr($icon, height);
}

/// Assign the correct SVG background image and dimensions to the element
%sprite {
	background-image: url(map-get($sprite, svgPath));
	background-size: map-get($sprite, width) map-get($sprite, height);
}

@mixin sprite($icon, $type: all) {
	@if $type == all {
		// Shares the backgrounds
		@extend %sprite;
	}

	$iconMap: icon-attr($icon);

	// Outputs dimensions in em
	@if $type == all or $type == size {
		width: map-get($iconMap, width) + 1;
		height: map-get($iconMap, height) + 1;
	}

	// Outputs background position in em
	@if $type == all or $type == bg {
		background-position: map-get($iconMap, x) - 10 map-get($iconMap, y) - 10;
	}

}

// Opacitated colr for RGBA fallback
@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}

@mixin calc ($property, $expression) {
	#{$property}: -moz-calc(#{$expression});
	#{$property}: -webkit-calc(#{$expression});
	#{$property}: -o-calc(#{$expression});
	#{$property}: calc(#{$expression});
}
